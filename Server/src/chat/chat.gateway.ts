import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayInit,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { ChatService } from './chat.service';

@WebSocketGateway({ cors: { origin: '*', credentials: true } })
export class ChatGateway implements OnGatewayInit {
  @WebSocketServer()
  server: Server;

  constructor(private readonly chatService: ChatService) {}

  afterInit(server: Server) {
    console.log(`‚úÖ WebSocket server ƒëang ch·∫°y t·∫°i ws://localhost:3000`);
  }

  // üîπ X·ª≠ l√Ω khi client g·ª≠i tin nh·∫Øn
  @SubscribeMessage('sendMessage')
  async handleSendMessage(
    @MessageBody()
    {
      senderId,
      receiverId,
      text,
    }: { senderId: string; receiverId: string; text: string },
    @ConnectedSocket() client: Socket,
  ) {
    const message = await this.chatService.sendMessage(
      senderId,
      receiverId,
      text,
    );

    // G·ª≠i tin nh·∫Øn t·ªõi c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
    this.server.to([senderId, receiverId]).emit('receiveMessage', message);
  }

  // üîπ X·ª≠ l√Ω khi client tham gia v√†o m·ªôt ph√≤ng chat
  @SubscribeMessage('joinChat')
  handleJoinChat(
    @MessageBody('userId') userId: string,
    @ConnectedSocket() client: Socket,
  ) {
    client.join(userId); // Tham gia ph√≤ng c√≥ ID c·ªßa ng∆∞·ªùi d√πng
  }
}
