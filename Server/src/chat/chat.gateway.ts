import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayInit,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { ChatService } from './chat.service';
import { Subscriber } from 'rxjs';

@WebSocketGateway({ cors: { origin: '*', credentials: true } })
export class ChatGateway implements OnGatewayInit {
  @WebSocketServer()
  server: Server;

  constructor(private readonly chatService: ChatService) {}

  afterInit(server: Server) {
    console.log(`‚úÖ WebSocket server ƒëang ch·∫°y t·∫°i ws://localhost:3000`);
  }

  // ==============                     =============
  // ============== Socket g·ª≠i tin nh·∫Øn =============
  // ==============                     =============
  @SubscribeMessage('sendMessage')
  async handleSendMessage(
    @MessageBody()
    {
      senderId,
      receiverId,
      text,
    }: { senderId: string; receiverId: string; text: string },
    @ConnectedSocket() client: Socket,
  ) {
    console.log('[Server] üì• Received sendMessage event:', {
      senderId,
      receiverId,
      text,
    });

    if (!senderId || !receiverId || !text) {
      console.error('‚ùå L·ªói: senderId, receiverId ho·∫∑c text b·ªã thi·∫øu!');
      return;
    }

    try {
      const message = await this.chatService.sendMessage(
        senderId,
        receiverId,
        text,
      );
      // console.log('‚úÖ Tin nh·∫Øn ƒë√£ l∆∞u v√†o DB:', message);

      // Ki·ªÉm tra danh s√°ch ph√≤ng (rooms) m√† client ƒëang k·∫øt n·ªëi
      // console.log('üè† Danh s√°ch ph√≤ng c·ªßa client:', client.rooms);

      // G·ª≠i tin nh·∫Øn t·ªõi c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
      // this.server.to([senderId, receiverId]).emit('receiveMessage', message);
      // console.log('[Server] ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi:', [senderId, receiverId]);

      // g·ª≠i tin nh·∫Øn t·ªõi room ng∆∞·ªùi nh·∫≠n
      this.server.to([receiverId]).emit('receiveMessage', message);

      console.log('[Server] ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi:', [receiverId]);
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error);
    }
  }

  // ==============                                       =============
  // ============== T·∫°o room cho user - nghƒ©a l√† online ·∫•y =============
  // ==============                                        =============
  @SubscribeMessage('joinChat')
  handleJoinChat(
    @MessageBody('userId') userId: string,
    @ConnectedSocket() client: Socket,
  ) {
    console.log('[Server] T·∫°o 1 ph√≤ng chat v·ªõi id l√† userID:', userId);
    client.join(userId);
    console.log(`[Server] User ${userId} joined room`);
    console.log('[Server] Rooms of this client:', Array.from(client.rooms));
    // G·ª≠i x√°c nh·∫≠n l·∫°i cho client
    client.emit('joinedChat', { userId, rooms: Array.from(client.rooms) });
  }

  // ==============                    =============
  // ============== X·ª≠ l√Ω x√≥a tin nh·∫Øn =============
  // ==============                    =============
  @SubscribeMessage('deleteMessage')
  async handleDeleteMessage(
    @MessageBody()
    payload: {
      messageId: string;
      type: 'me' | 'everyone';
      userId: string;
      conversationId: string;
    },
    @ConnectedSocket() client: Socket,
  ) {
    const { messageId, type, userId, conversationId } = payload;

    if (type === 'everyone') {
      try {
        // Xoas tin nh·∫Øn ho√†n to√†n trong database
        await this.chatService.deleteMessage(messageId);

        // L·∫•y th√†nh vi√™n trong ƒëo·∫°n chat
        const members = await this.chatService.getGroupMembers(conversationId);
        // console.log(
        //   '[Server] [DelteMessage] Danh s√°ch th√†nh vi√™n trong ƒëo·∫°n chat:',
        //   members,
        // );

        // Ki·ªÉm tra xem members c√≥ ph·∫£i l√† m·∫£ng hay kh√¥ng
        // N·∫øu kh√¥ng ph·∫£i l√† m·∫£ng, c√≥ th·ªÉ l√† null ho·∫∑c undefined - s·∫Ω g√¢y l·ªói
        if (!Array.isArray(members)) {
          console.log('[Server] Danh s√°ch th√†nh vi√™n trong ƒëo·∫°n chat:');
          throw new Error('C√≥ v·∫ª nh∆∞ ƒëang c√≥ l·ªói j ƒë√≥');
        }

        // L·∫•y danh s√°ch userId d∆∞·ªõi d·∫°ng string[]
        const userIds = members.map((m) => m.userId._id.toString());
        console.log(
          '[Server] [DeleteMessage] Danh s√°ch userId trong ƒëo·∫°n chat:',
          userIds,
        );

        // G·ª≠i s·ª± ki·ªán cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi trong ƒëo·∫°n chat
        this.server.to(userIds).emit('messageDeleted', {
          messageId,
          type: 'everyone',
        });

        // ‚úÖ Th√¥ng b√°o ri√™ng cho client hi·ªán t·∫°i bi·∫øt l√† thao t√°c th√†nh c√¥ng
        client.emit('delete-success', {
          messageId,
          conversationId,
          type: 'everyone',
        });
      } catch (err) {
        console.error('[‚ùå Delete Failed]', err.message);
        client.emit('error-delete', {
          messageId,
          error: err.message,
        });
      }
    } else if (type === 'me') {
      // ƒê√°nh d·∫•u l√† tin nh·∫Øn ƒë√£ x√≥a v·ªõi user n√†y

      // G·ª≠i th√¥ng b√°o ch·ªâ cho client hi·ªán t·∫°i
      client.emit('message-deleted', {
        messageId,
        type: 'me',
      });
    }
  }
}
