import {
  BadRequestException,
  HttpException,
  HttpStatus,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { User, UserDocument } from './users.schema';
import { Model, Types } from 'mongoose';
import { ChangePasswordDto } from './dto/change-pasword.dto';
import * as bcrypt from 'bcrypt';
// import { v2 as cloudinary } from 'cloudinary';
import { cloudinary } from 'src/config/cloundinary.config';

@Injectable()
export class UserService {
  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>) {}

  // Upload avatar l√™n Cloudinary
  async uploadAvatar(avatar: string, phone: string): Promise<string> {
    try {
      const uploadResult = await cloudinary.uploader.upload(avatar, {
        folder: 'ZaloClone/avatars',
        public_id: `avatar_${phone}`, // t√™n ·∫£nh s·∫Ω l√† avatar_<s·ªë ƒëi·ªán tho·∫°i>
        overwrite: true, // ghi ƒë√® n·∫øu ƒë√£ t·ªìn t·∫°i
      });
      return uploadResult.secure_url; // Tr·∫£ v·ªÅ URL ·∫£nh ƒë√£ upload
    } catch (error) {
      console.error('L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary:', error);
      throw new Error('L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary');
    }
  }

  // ================================================= T·∫°o user m·ªõi - ƒëƒÉng k√Ω
  async createUser(
    name: string,
    phone: string,
    password: string,
    gender: string,
    dateOfBirth: string,
    avatar: string,
  ) {
    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existsUser = await this.userModel.findOne({ phone });

    if (existsUser) {
      throw new HttpException(
        {
          message: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!',
          statusCode: HttpStatus.BAD_REQUEST,
        },
        HttpStatus.BAD_REQUEST,
      );
    }

    // upload avatar l√™n Cloudinary
    const avatarUrl = await this.uploadAvatar(avatar, phone);

    // T·∫°o User m·ªõi v·ªõi c√°c th√¥ng tin ƒë·∫ßy ƒë·ªß
    const newUser = new this.userModel({
      name,
      phone,
      password,
      gender,
      dateOfBirth: new Date(dateOfBirth), // Chuy·ªÉn ƒë·ªïi ng√†y sinh th√†nh Date object
      avatar: avatarUrl,
    });

    return await newUser.save();
  }

  // ==================================================== L·∫•y danh s√°ch user
  async getAllUsers(): Promise<User[]> {
    return await this.userModel.find();
  }

  // ============================== T√¨m v√† L·∫•y th√¥ng tin user ==============================
  async findUser(param: string): Promise<User> {
    let user: any;

    // N·∫øu p·∫©m l√† ObjectId th√¨ t√¨m theo Id
    if (Types.ObjectId.isValid(param)) {
      // console.log('T√¨m theo Id: ', param);
      user = await this.userModel.findById(new Types.ObjectId(param));
    }
    // N·∫øu param l√† phone th√¨ t√¨m theo phone
    else {
      // console.log('Tim theo phone: ', param);
      user = await this.userModel.findOne({ phone: param });
    }

    if (!user) {
      throw new NotFoundException('User kh√¥ng t·ªìn t·∫°i!!!');
    }

    return user;
  }

  // ============================== API check phone ƒë√£ t·ªìn t·∫°i hay ch∆∞a ==============================
  async checkPhoneExist(phone: string): Promise<boolean> {
    const exists = await this.userModel.exists({ phone });
    return !!exists; // Chuy·ªÉn v·ªÅ boolean
  }

  // ================================================== C·∫≠p nh·∫≠t th√¥ng tin user
  async updateUser(userId: string, updateData: Partial<User>): Promise<User> {
    if (updateData.avatar) {
      try {
        const avatarUrl = await this.uploadAvatar(updateData.avatar, userId);
        updateData.avatar = avatarUrl; // C·∫≠p nh·∫≠t URL ·∫£nh ƒë√£ upload
      } catch (error) {
        console.error('L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary:', error);
        throw new BadRequestException('L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary');
      }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    const user = await this.userModel.findByIdAndUpdate(userId, updateData, {
      new: true,
    });

    if (!user) {
      throw new NotFoundException('User kh√¥ng t·ªìn t·∫°i!!!');
    }

    return user;
  }

  // ================================================== X√≥a user v√† avatar c·ªßa user
  async deleteUser(param: string): Promise<{ message: string }> {
    let result: any;

    // Ki·ªÉm tra xem param c√≥ ph·∫£i l√† ObjectId hay kh√¥ng
    if (!Types.ObjectId.isValid(param)) {
      result = await this.userModel.findOneAndDelete({ phone: param });
    } else {
      result = await this.userModel.findByIdAndDelete(param);
    }

    if (!result) {
      throw new NotFoundException('User kh√¥ng t·ªìn t·∫°i!!!');
    }

    // N·∫øu c√≥ avatar, x√≥a ·∫£nh kh·ªèi Cloudinary
    if (result.avatar) {
      try {
        // Tr√≠ch xu·∫•t public_id t·ª´ URL c·ªßa avatar ƒë·ªÉ x√≥a ·∫£nh kh·ªèi Cloudinary
        const publicId = result.avatar.split('/').pop()?.split('.')[0];

        if (publicId) {
          await cloudinary.uploader.destroy(publicId); // X√≥a ·∫£nh kh·ªèi Cloudinary
        }
      } catch (error) {
        console.error('L·ªói khi x√≥a ·∫£nh avatar t·ª´ Cloudinary:', error);
        throw new BadRequestException('L·ªói khi x√≥a ·∫£nh avatar t·ª´ Cloudinary');
      }
    }

    return { message: 'X√≥a user v√† avatar th√†nh c√¥ng!!!' };
  }

  // =================================================== ƒê·ªïi m·∫≠t kh·∫©u
  async changePassword(userId: string, ChangePasswordDto: ChangePasswordDto) {
    const { oldPassword, newPassword } = ChangePasswordDto;

    // T√¨m user theo id
    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException('User kh√¥ng t·ªìn t·∫°i!!!');
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      throw new BadRequestException('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!');
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);

    // üîπ L∆∞u l·∫°i user
    await user.save();

    return { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!' };
  }

  // ==================================== C·∫≠p nh·∫≠t h√¨nh ·∫£nh =========================
  async updateAvatar(userId: string, avatar: string): Promise<User> {
    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException('User kh√¥ng t·ªìn t·∫°i!!!');
    }

    user.avatar = avatar;
    await user.save();

    return user;
  }
}
